/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication2.socketAndCompression;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author yk
 */
public class CompressedFileTransfer extends javax.swing.JFrame {

    /**
     * Creates new form CompressedFileTransfer
     */
    public CompressedFileTransfer() {
        this.SOCKET_PORT = 13782;
        this.mybytearray = new byte[FILE_SIZE];
        this.current = 0;
        this.FILE_TO_RECEIVED = System.getProperty("user.home") + "\\Desktop\\";
        initComponents();
        setLocationRelativeTo(null);
        fFileChooser1.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

    }
    private String ip, destinationDir = null, status;
    public static SimpleFileClient file;
    private int statusDecompress = 1, connectionStatus = 0;

    public static int SOCKET_PORT;      // you may change this
    public static String SERVER; // server's ip address
    public static String FILE_TO_RECEIVED;//= "C:\\Users\\yk\\Desktop\\yusuf.zip";  // you may change this

    public final static int FILE_SIZE = 200000000; // file size temporary hard coded
    // should bigger than the file to be downloaded

    DateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd");
    public byte[] mybytearray;
    public int current;
    boolean check = true;
    private Socket sock = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        bConnect = new javax.swing.JButton();
        bDecompress = new javax.swing.JButton();
        tSelectIP = new javax.swing.JFormattedTextField();
        tUnZipFile = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tDetails = new javax.swing.JTextArea();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bConnect.setText("Connect");
        bConnect.setActionCommand("bConnect");
        bConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConnectActionPerformed(evt);
            }
        });

        bDecompress.setText("Decompressed");
        bDecompress.setActionCommand("bUnZip");
        bDecompress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDecompressActionPerformed(evt);
            }
        });

        try {
            tSelectIP.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###.###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        tSelectIP.setText("");
        tSelectIP.setToolTipText("255.255.255.255");

        tUnZipFile.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(bConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tSelectIP, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(tUnZipFile)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                        .addComponent(bDecompress)
                        .addGap(33, 33, 33))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tUnZipFile, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tSelectIP, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bConnect)
                    .addComponent(bDecompress))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        bConnect.getAccessibleContext().setAccessibleName("bConnect");
        bDecompress.getAccessibleContext().setAccessibleName("bUnZip");

        tDetails.setEditable(false);
        tDetails.setColumns(20);
        tDetails.setRows(5);
        tDetails.setName(""); // NOI18N
        tDetails.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(tDetails);
        tDetails.getAccessibleContext().setAccessibleName("");
        tDetails.getAccessibleContext().setAccessibleDescription("");

        jMenu1.setText("File");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu1MousePressed(evt);
            }
        });
        jMenuBar2.add(jMenu1);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConnectActionPerformed
        // TODO add your handling code here:
        tDetails.setText("");
        if (Objects.equals(tSelectIP.getValue(), null)) {
            JOptionPane.showMessageDialog(jPanel1, "Proper IP address needed", ip, JOptionPane.WARNING_MESSAGE);
        } else {
            ip = tSelectIP.getValue().toString();
            String[] numbers = ip.split(Pattern.quote("."));
            boolean check = true;
            for (int i = 0; i < numbers.length; i++) {
                if (Integer.parseInt(numbers[i]) >= 256 || Integer.parseInt(numbers[i]) < 0 || Integer.parseInt(numbers[0]) == 0 || Integer.parseInt(numbers[3]) == 0) {
                    check = false;
                    JOptionPane.showMessageDialog(jPanel1, "IP numbers must be between 0-256. (e.g -> 192.168.001.001)", "IP", JOptionPane.WARNING_MESSAGE);
                    break;
                }
                int temp = Integer.parseInt(numbers[i]);
                numbers[i] = "" + temp;
            }
            ip = numbers[0] + "." + numbers[1] + "." + numbers[2] + "." + numbers[3];
            if (check) {
                bConnect.setEnabled(false);
                setServer(ip);
                tDetails.setText("Start to connect..");
                try {

                    connectionStatus = openConnection();
                    if (connectionStatus == 1) {
                        tDetails.setText("Reading is Done.!!");
                    } else {
                        tDetails.setText("Timeout..! \nPlease check your internet connection..");
                    }

                    writeToFile("temp"); // now we are just selecting standart file location, we may improve it later.
                } catch (Exception ex) {
                    Logger.getLogger(CompressedFileTransfer.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    bConnect.setEnabled(check);
                }
            }
        }
    }//GEN-LAST:event_bConnectActionPerformed

    private void bDecompressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDecompressActionPerformed
        try {
            // TODO add your handling code here:
            tDetails.setText("");
            if (statusDecompress == 1) {
                int result = fFileChooser1.showOpenDialog(this);
                if (Objects.equals(result, JFileChooser.APPROVE_OPTION)) {
                    destinationDir = fFileChooser1.getSelectedFile().getAbsolutePath();
                    bDecompress.setText("Start Decompress");
                    statusDecompress = 2;
                    tUnZipFile.setEditable(true);
                    tUnZipFile.setText(destinationDir);
                }
            } else {
                if (Objects.equals(destinationDir, null)) {
                    JOptionPane.showMessageDialog(jPanel1, "You need to select file", "File Location", JOptionPane.WARNING_MESSAGE);
                } else {
                    unzipFileIntoDirectory(new File(destinationDir), new File(System.getProperty("user.home") + "\\Desktop\\UnZippedFiles"));
                    JOptionPane.showMessageDialog(jPanel1, "Unzipped file(s) from : " + file.getFileLocation() + "\nto" + destinationDir, "File Location", JOptionPane.INFORMATION_MESSAGE);
                }
                destinationDir = null;
                bDecompress.setText("Decompressed");
                statusDecompress = 1;
                tUnZipFile.setText("");
                tUnZipFile.setEditable(false);
            }
        } catch (Exception ex) {
            Logger.getLogger(CompressedFileTransfer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bDecompressActionPerformed

    private void jMenu1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MousePressed
        // TODO add your handling code here:
        boolean chooseFile = true;
        if (statusDecompress == 1 || chooseFile) {
            int result = fFileChooser1.showOpenDialog(this);
            if (Objects.equals(result, JFileChooser.APPROVE_OPTION)) {
                destinationDir = fFileChooser1.getSelectedFile().getAbsolutePath();
                bDecompress.setText("Start Decompress");
                statusDecompress = 2;
                tUnZipFile.setEditable(true);
                tUnZipFile.setText(destinationDir);
            }
        }
    }//GEN-LAST:event_jMenu1MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompressedFileTransfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompressedFileTransfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompressedFileTransfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompressedFileTransfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CompressedFileTransfer().setVisible(true);
        });
    }

    public void setServer(String ServerIP) {
        this.SERVER = ServerIP;
    }

    public void setPort(int portNumber) {
        this.SOCKET_PORT = portNumber;
    }

    public void setFileLocation(String file) {
        this.FILE_TO_RECEIVED = file;
    }

    public String getServer() {
        return SERVER;
    }

    public int getPort() {
        return SOCKET_PORT;
    }

    public String getFileLocation() {
        return FILE_TO_RECEIVED;
    }

    public int openConnection() throws Exception {
        int bytesRead;
        int a = 0;
        while (check) {
            try {

                sock = new Socket(SERVER, SOCKET_PORT);
                //System.out.println("Connecting...");
                check = false;

                // receive file
                InputStream is = sock.getInputStream();
                BufferedInputStream bis = new BufferedInputStream(is);

                bytesRead = is.read(mybytearray, 0, mybytearray.length);
                current = bytesRead;

                do {
                    bytesRead
                            = is.read(mybytearray, current, (mybytearray.length - current));
                    if (bytesRead >= 0) {
                        current += bytesRead;
                    }
                    tDetails.setText("Readed " + bytesRead + " and total:" + current);

                } while (bytesRead > -1);
                //System.out.println("Reading is done..!");

                tDetails.setText("File " + FILE_TO_RECEIVED + " downloaded (" + current + " bytes read)");

                //unzipFileIntoDirectory(new File("C:\\Users\\yk\\Desktop\\yusuf.zip"), new File("C:\\Users\\yk\\Desktop\\abc"));
            } catch (IOException e) {
                try {
                    Thread.sleep(500);
                    a++;
                    if (a == 10) {
                        return -1;
                    }
                    tDetails.setText("Waiting.. " + e.getMessage());

                } catch (InterruptedException ex) {
                    Logger.getLogger(SimpleFileClient.class.getName()).log(Level.SEVERE, null, ex);
                }

            } finally {
                if (sock != null) {
                    try {
                        sock.close();
                    } catch (IOException ex) {
                        Logger.getLogger(SimpleFileClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }
        }
        check = true;
        return 1;

    }

    public void writeToFile(String fileLocation) {
        FileOutputStream fos = null;
        BufferedOutputStream bos = null;
        try {
            fos = new FileOutputStream(FILE_TO_RECEIVED + dateFormat.format(Calendar.getInstance().getTime()) + ".zip");
            bos = new BufferedOutputStream(fos);

            bos.write(mybytearray, 0, current);
            bos.flush();
        } catch (Exception e) {
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException ex) {
                    Logger.getLogger(SimpleFileClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (bos != null) {
                try {
                    bos.close();
                } catch (IOException ex) {
                    Logger.getLogger(SimpleFileClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void unzipFileIntoDirectory(File archive, File destinationDir)
            throws Exception {
        byte[] buffer = new byte[1024];

        try {

            //create output directory is not exists
            if (!destinationDir.exists()) {
                destinationDir.mkdir();
            }

            //get the zip file content
            ZipInputStream zis
                    = new ZipInputStream(new FileInputStream(archive));
            //get the zipped file list entry
            ZipEntry ze = zis.getNextEntry();

            while (ze != null) {

                String fileName = ze.getName();
                File newFile = new File(destinationDir + File.separator + fileName);

                //System.out.println("file unzip : " + newFile.getAbsoluteFile());
                //create all non exists folders
                //else you will hit FileNotFoundException for compressed folder
                new File(newFile.getParent()).mkdirs();

                FileOutputStream fos = new FileOutputStream(newFile);

                int len;
                while ((len = zis.read(buffer)) > 0) {
                    fos.write(buffer, 0, len);
                }

                fos.close();
                ze = zis.getNextEntry();
            }

            zis.closeEntry();
            zis.close();

            System.out.println("Done");

        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bConnect;
    private javax.swing.JButton bDecompress;
    private javax.swing.JFileChooser fFileChooser1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea tDetails;
    private javax.swing.JFormattedTextField tSelectIP;
    private javax.swing.JTextField tUnZipFile;
    // End of variables declaration//GEN-END:variables
}
